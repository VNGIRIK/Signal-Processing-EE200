# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BoPUlZSs1yopsBOphCOeP1Iq6VhcrkoK
"""

from google.colab import files
from PIL import Image
import io
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import convolve2d

# Uploading two image files
uploaded = files.upload()

# Getting the list of uploaded file names
filenames = list(uploaded.keys())

# Opening and preprocessing both images
img1 = Image.open(io.BytesIO(uploaded[filenames[0]])).convert("L").resize((512, 512))
img2 = Image.open(io.BytesIO(uploaded[filenames[1]])).convert("L").resize((512, 512))

img1_np = np.array(img1).astype(np.float32)
img2_np = np.array(img2).astype(np.float32)

import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from scipy.ndimage import gaussian_filter
from scipy.signal import convolve2d

# Load and prepare the images
img1 = Image.open("dog_gray.jpg").convert("L").resize((512, 512))
img2 = Image.open("cat_gray.jpg").convert("L").resize((512, 512))

img1_np = np.array(img1).astype(np.float32)
img2_np = np.array(img2).astype(np.float32)

# Simulate fspecial('Gaussian', [ksize, ksize], sigma)
def gaussian_kernel(size, sigma):
    ax = np.linspace(-(size // 2), size // 2, size)
    gauss = np.exp(-0.5 * np.square(ax) / np.square(sigma))
    kernel = np.outer(gauss, gauss)
    return kernel / np.sum(kernel)

# Simulate my_imfilter with symmetric padding
def my_imfilter(image, kernel):
    return convolve2d(image, kernel, mode='same', boundary='symm')

# Filter settings (you can tweak these)
cutoff_size = 25     # similar to [h, w] of the filter
cutoff_sigma = 8     # how strong the blur is

# Step 1: Create Gaussian filter
gaussian_filter_kernel = gaussian_kernel(cutoff_size, cutoff_sigma)

# Step 2: Low-pass filtering on image1 (dog)
low_frequencies = my_imfilter(img1_np, gaussian_filter_kernel)

# Step 3: High-pass from image2 (cat - blurred cat)
blurred_img2 = my_imfilter(img2_np, gaussian_filter_kernel)
high_frequencies = img2_np - blurred_img2

# Step 4: Combine
hybrid_image = low_frequencies + high_frequencies
hybrid_image = np.clip(hybrid_image, 0, 255).astype(np.uint8)

# Step 5: Display all stages
plt.figure(figsize=(18, 8))

plt.subplot(2, 4, 1)
plt.imshow(img1_np, cmap='gray')
plt.title("Original Image 1 (Dog)")
plt.axis('off')

plt.subplot(2, 4, 2)
plt.imshow(low_frequencies, cmap='gray')
plt.title("Low Frequencies (Dog)")
plt.axis('off')

plt.subplot(2, 4, 3)
plt.imshow(img2_np, cmap='gray')
plt.title("Original Image 2 (Cat)")
plt.axis('off')

plt.subplot(2, 4, 4)
plt.imshow(high_frequencies + 127, cmap='gray')  # shift for visualization
plt.title("High Frequencies (Cat)")
plt.axis('off')

plt.subplot(2, 4, 5)
plt.imshow(hybrid_image, cmap='gray')
plt.title("Hybrid Image")
plt.axis('off')

plt.tight_layout()
plt.show()