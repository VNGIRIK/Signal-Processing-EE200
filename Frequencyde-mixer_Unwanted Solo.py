# -*- coding: utf-8 -*-
"""Copy of Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rkfBJqD7aJ2a2gAeYY0lqipe7thBPCuz

Q2. Frequency de-mixer: ‘Unwanted Solo’
In music production, sound engineers often needs

to manipulate audio to restore or enhance record-
ings. One common challenge is removing unwanted

sounds from a mixture, whether it’s background

noise, an instrument played out of sync, or an ele-
ment that simply doesn’t belong.

You are given a music track that has been cor-
rupted by the presence of an unwanted instrumen-
tal beats, disrupting the intended harmony. Your

task is to analyze the frequency characteristics of

the input, then design and implement an appropri-
ate filtering technique using Python to suppress the

interfering component. The goal is to recover the
original song as faithfully as possible and export the
cleaned version.
Use various analysis tools like Bode graphs,

power spectral density, pole-zero plots of your sys-
tem design and isolate frequency regions, and de-
sign filters accordingly to remove unwanted solo in-
strumental music. Your final submission should

include your code, the restored audio file, and a
detailed explanation of your method and design

choices. This system is known as frequency de-
mixer.
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.io import wavfile
from scipy.signal import butter, lfilter, spectrogram
from google.colab import files

# Uploading and loading the given audio in assignment with piccolo
uploaded = files.upload()
fs, data = wavfile.read("song_with_2piccolo.wav")

if data.ndim > 1:
    data = data[:, 0]  # mono

data = data.astype(np.float32)
data /= np.max(np.abs(data))  # normalization

# Band-Stop filter function
for (lowcut, highcut) in harmonic_bands:
    b, a = bandstop_filter(lowcut, highcut, fs, order=6)

    # ----- BODE PLOT -----
    w, h = signal.freqz(b, a, worN=2048, fs=fs)
    plt.figure(figsize=(10, 4))
    plt.plot(w, 20 * np.log10(np.abs(h) + 1e-6))  # dB magnitude
    plt.title(f"Bode Plot - Bandstop {lowcut}-{highcut} Hz")
    plt.xlabel("Frequency [Hz]")
    plt.ylabel("Magnitude [dB]")
    plt.grid()
    plt.show()

    # ----- POLE-ZERO PLOT -----
    z = np.roots(b)
    p = np.roots(a)
    plt.figure(figsize=(5, 5))
    uc = plt.Circle((0, 0), 1, color='black', fill=False, linestyle='dashed')
    ax = plt.gca()
    ax.add_patch(uc)
    plt.plot(np.real(z), np.imag(z), 'go', label='Zeros')
    plt.plot(np.real(p), np.imag(p), 'rx', label='Poles')
    plt.title(f"Pole-Zero Plot - Bandstop {lowcut}-{highcut} Hz")
    plt.xlabel("Real")
    plt.ylabel("Imaginary")
    plt.grid()
    plt.axis('equal')
    plt.legend()
    plt.show()

    # Apply the filter
    filtered = lfilter(b, a, filtered)
    print(f"Filtered band {lowcut}-{highcut} Hz")

# Applying band-stop filters for 1000–2000 Hz and harmonics up to 5000 Hz
filtered = data.copy()
base_band = (600, 1800)
harmonic_bands = []

# Generating harmonic bands only up to 5kHz
i = 1
while True:
    low = base_band[0] * i
    high = base_band[1] * i
    if low >= 6000:
        break
    if high > 6000:
        high = 6000  # Trim to 5k
    harmonic_bands.append((low, high))
    i += 1

# Applying all band-stop filters
for (lowcut, highcut) in harmonic_bands:
    b, a = bandstop_filter(lowcut, highcut, fs, order=6)
    filtered = lfilter(b, a, filtered)
    print(f"Filtered band {lowcut}-{highcut} Hz")

#Plot spectrograms
f1, t1, Sxx1 = spectrogram(data, fs)
f2, t2, Sxx2 = spectrogram(filtered, fs)

plt.figure(figsize=(14, 5))
plt.subplot(1, 2, 1)
plt.pcolormesh(t1, f1, 10 * np.log10(Sxx1 + 1e-8), shading='gouraud')
plt.title("Original Spectrogram")
plt.xlabel("Time (s)")
plt.ylabel("Frequency (Hz)")
plt.ylim(0, 15000)
plt.colorbar(label='Power (dB)')

plt.subplot(1, 2, 2)
plt.pcolormesh(t2, f2, 10 * np.log10(Sxx2 + 1e-8), shading='gouraud')
plt.title("Filtered Spectrogram (Up to 5kHz Harmonics Removed)")
plt.xlabel("Time (s)")
plt.ylim(0, 15000)
plt.colorbar(label='Power (dB)')

plt.tight_layout()
plt.show()

#Saving and downloading cleaned audio
output_filename = "cleaned_piccolo_removed.wav"
filtered_int16 = (filtered / np.max(np.abs(filtered)) * 32767).astype(np.int16)
wavfile.write(output_filename, fs, filtered_int16)
files.download(output_filename)